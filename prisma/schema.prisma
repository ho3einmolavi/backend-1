datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique
  password  String
  firstname String?
  lastname  String?
  role      Role     @default(USER)

  @@index([role], name: "UserRoleIndex")
}

enum Role {
  ADMIN
  USER
}

model Domain {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  domain         String      @unique
  expiredAt      DateTime
  nsState        DomainState @default(PENDING)
  arvanSslState  DomainState @default(PENDING)
  letsEncryptSsl DomainState @default(PENDING)
  arvanId        String
  serverId       String
  arvan          Arvan       @relation(fields: [arvanId], references: [id])
  server         Server      @relation(fields: [serverId], references: [id])

  @@index([nsState], name: "DomainNsStateIndex")
  @@index([arvanSslState], name: "DomainArvanSslStateIndex")
  @@index([letsEncryptSsl], name: "DomainLetsEncryptSslIndex")
  @@index([arvanId], name: "DomainArvanIdIndex")
  @@index([serverId], name: "DomainServerIdIndex")
}

enum DomainState {
  PENDING
  APPLIED
}

model Arvan {
  id             String    @id
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  password       String
  token          String?
  tokenExpiredAt DateTime?
  nsKeys         String[]
  Domain         Domain[]
  Package        Package[]
}

model Server {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  type       ServerCountry
  ip         String        @unique
  domain     String        @unique
  token      String
  Package    Package[]
  Domain     Domain[]
  ClientStat ClientStat[]
}

enum ServerCountry {
  NL
  DE
}

model Package {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  type      PackageType
  expiredAt DateTime
  traffic   Int
  download  Int
  upload    Int
  userId    String
  serverId  String
  user      Arvan       @relation(fields: [userId], references: [id])
  server    Server      @relation(fields: [serverId], references: [id])

  @@index([userId], name: "PackageUserIdIndex")
  @@index([serverId], name: "PackageServerIdIndex")
}

enum PackageType {
  NL
  DE
}

model ClientStat {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiryTime BigInt
  total      BigInt
  down       BigInt
  up         BigInt
  email      String
  enable     Boolean
  serverId   String
  port       Int?
  server     Server   @relation(fields: [serverId], references: [id])

  @@index([serverId], name: "ClientStatServerIdIndex")
}
