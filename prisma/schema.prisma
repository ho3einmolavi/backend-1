datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phone       String        @unique
  password    String
  firstname   String?
  lastname    String?
  balance     Int           @default(0)
  role        Role          @default(USER)
  userPackage UserPackage[]
  Payment     Payment[]
  // sendTransfer    Transfer[]    @relation("TransferSenderRelation")
  // recieveTransfer Transfer[]    @relation("TransferReceiverRelation")

  @@index([role], name: "UserRoleIndex")
}

model Domain {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  domain         String      @unique
  expiredAt      DateTime
  nsState        DomainState @default(PENDING)
  arvanSslState  DomainState @default(PENDING)
  letsEncryptSsl DomainState @default(PENDING)
  port           Int?
  isAutomated    Boolean?
  arvanId        String @db.Uuid
  serverId       String @db.Uuid
  arvan          Arvan       @relation(fields: [arvanId], references: [id])
  server         Server      @relation(fields: [serverId], references: [id])

  @@index([nsState], name: "DomainNsStateIndex")
  @@index([arvanSslState], name: "DomainArvanSslStateIndex")
  @@index([letsEncryptSsl], name: "DomainLetsEncryptSslIndex")
  @@index([arvanId], name: "DomainArvanIdIndex")
  @@index([serverId], name: "DomainServerIdIndex")
}

enum DomainState {
  PENDING
  APPLIED
}

model Arvan {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  password       String
  token          String?
  tokenExpiredAt DateTime?
  nsKeys         String[]
  Domain         Domain[]
}

enum ServerCountry {
  NL
  DE
  TR
}

model Server {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  type        ServerCountry
  ip          String        @unique
  domain      String        @unique
  inboundId   Int           @default(1)
  token       String
  userPackage UserPackage[]
  Domain      Domain[]
  ClientStat  ClientStat[]
}


model Package {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  traffic        Float
  expirationDays Int
  price          Int
  userCount      Int
  UserPackage    UserPackage[]
}

model UserPackage {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  packageId String     @db.Uuid
  userId    String     @db.Uuid
  serverId  String     @db.Uuid
  statId    String     @db.Uuid
  paymentId String     @db.Uuid
  payment   Payment    @relation(fields: [paymentId], references: [id])
  package   Package    @relation(fields: [packageId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  server    Server     @relation(fields: [serverId], references: [id])
  stat      ClientStat @relation(fields: [statId], references: [id])

  @@index([userId], name: "UserPackageUserIdIndex")
  @@index([serverId], name: "UserPackageServerIdIndex")
  @@index([statId], name: "UserPackageStatIdIndex")
  @@index([packageId], name: "UserPackagePackageIdIndex")
}

model ClientStat {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  expiryTime BigInt
  total      BigInt
  down       BigInt
  up         BigInt
  email      String
  enable     Boolean
  serverId   String        @db.Uuid      
  server     Server        @relation(fields: [serverId], references: [id])
  Package    UserPackage[]

  @@index([serverId], name: "ClientStatServerIdIndex")
  @@index([expiryTime], name: "ClientStatExpiryTimeIndex")
  @@index([total], name: "ClientStatTotalIndex")
  @@index([down], name: "ClientStatDownIndex")
  @@index([up], name: "ClientStatUpIndex")
}

enum PaymentState {
  PENDING
  APPLIED
}

model Payment {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  amount         Int
  status         PaymentState @default(PENDING)
  payerId        String       @db.Uuid
  discountAmount Int?

  payer       User          @relation(fields: [payerId], references: [id])
  UserPackage UserPackage[]
}

// model Transation {
//   id        String   @id
//   amount    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   payerId   String

//   payer User @relation(fields: [payerId], references: [id])
// }

// model Transfer {
//   id         String   @id 
//   amount     Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   senderId   String
//   receiverId String

//   sender   User @relation("TransferSenderRelation", fields: [senderId], references: [id])
//   receiver User @relation("TransferReceiverRelation", fields: [receiverId], references: [id])
// }
