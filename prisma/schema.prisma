datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  USER
}

model User {
  id                         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  phone                      String   @unique
  password                   String // @db.VarChar(255)
  firstname                  String // @db.VarChar(255)
  lastname                   String // @db.VarChar(255)
  balance                    Float    @default(0)
  profitBalance              Float    @default(0)
  totalProfit                Float    @default(0)
  parentId                   String?  @db.Uuid
  referId                    String?  @db.Uuid
  role                       Role     @default(USER)
  isDisabled                 Boolean  @default(false)
  isParentDisabled           Boolean  @default(false)
  isVerified                 Boolean  @default(true)
  maxRechargeDiscountPercent Float?
  profitPercent              Float    @default(0)
  initialDiscountPercent     Float?
  appliedDiscountPercent     Float?
  description                String?

  parent      User?         @relation("UserParentRelation", fields: [parentId], references: [id])
  children    User[]        @relation("UserParentRelation")
  refer       User?         @relation("UserReferRelation", fields: [referId], references: [id])
  referers    User[]        @relation("UserReferRelation")
  userPackage UserPackage[]
  payment     Payment[]
  telegram    TelegramUser?
  bankCard    BankCard[]
  file        File[]
  promotion   Promotion[]
  userGift    UserGift[]

  @@index([role], name: "UserRoleIndex")
  @@index([parentId], name: "UserParentIdIndex")
  @@index([referId], name: "UserReferIdIndex")
}

model TelegramUser {
  id          BigInt   @id
  userId      String   @unique @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String?  @unique
  firstname   String?  @db.VarChar(255)
  lastname    String?  @db.VarChar(255)
  username    String?  @db.VarChar(64)
  bigAvatar   String?  @db.VarChar(255)
  smallAvatar String?  @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "TelegramUserUserIdIndex")
}

model BankCard {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  number    String   @unique
  name      String   @db.VarChar(255)

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "BankCardUserIdIndex")
}

model File {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  name      String   @db.VarChar(255)
 
  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "FileUserIdIndex")
}

model Domain {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  domain         String      @unique // @db.VarChar(255)
  expiredAt      DateTime
  nsState        DomainState @default(PENDING)
  arvanSslState  DomainState @default(PENDING)
  letsEncryptSsl DomainState @default(PENDING)
  port           Int?
  isAutomated    Boolean?
  arvanId        String      @db.Uuid
  serverId       String      @db.Uuid

  arvan  Arvan  @relation(fields: [arvanId], references: [id])
  server Server @relation(fields: [serverId], references: [id])

  @@index([nsState], name: "DomainNsStateIndex")
  @@index([arvanSslState], name: "DomainArvanSslStateIndex")
  @@index([letsEncryptSsl], name: "DomainLetsEncryptSslIndex")
  @@index([arvanId], name: "DomainArvanIdIndex")
  @@index([serverId], name: "DomainServerIdIndex")
}

enum DomainState {
  PENDING
  APPLIED
}

model Arvan {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique @db.VarChar(255)
  password       String // @db.VarChar(255)
  token          String? // @db.VarChar(255)
  tokenExpiredAt DateTime?
  nsKeys         String[]  @db.VarChar(255)
  domain         Domain[]
}

enum ServerCountry {
  IR
  NL
  DE
  TR
}

model Server {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  type         ServerCountry
  ip           String        @unique // @db.VarChar(255)
  domain       String        @unique // @db.VarChar(255)
  inboundId    Int           @default(1)
  token        String // @db.VarChar(255)
  tunnelDomain String?       @db.VarChar(255)
  stats        Json?
  userPackage  UserPackage[]
  Domain       Domain[]
  clientStat   ClientStat[]
}

model Package {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  traffic        Float
  expirationDays Float
  price          Float
  userCount      Int
  order          Int?
  forRole        Role[]        @default([ADMIN, USER])
  userPackage    UserPackage[]
  Promotion      Promotion[]
  UserGift       UserGift[]
}

model RechargePackage {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  amount          Float
  discountPercent Float
}

model UserPackage {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  deletedAt              DateTime?
  finishedAt             DateTime?
  name                   String    @db.VarChar(255)
  packageId              String    @db.Uuid
  userId                 String    @db.Uuid
  serverId               String    @db.Uuid
  statId                 String    @db.Uuid
  paymentId              String?   @db.Uuid
  thresholdWarningSentAt DateTime?
  orderN                 Int       @default(1)

  payment Payment?   @relation(fields: [paymentId], references: [id])
  package Package    @relation(fields: [packageId], references: [id])
  user    User       @relation(fields: [userId], references: [id])
  server  Server     @relation(fields: [serverId], references: [id])
  stat    ClientStat @relation(fields: [statId], references: [id])

  @@index([userId], name: "UserPackageUserIdIndex")
  @@index([orderN], name: "UserPackageOrderNIndex")
  @@index([serverId], name: "UserPackageServerIdIndex")
  @@index([statId], name: "UserPackageStatIdIndex")
  @@index([packageId], name: "UserPackagePackageIdIndex")
}

model ClientStat {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiryTime      BigInt
  total           BigInt
  down            BigInt
  up              BigInt
  email           String // @db.VarChar(255)
  enable          Boolean
  serverId        String    @db.Uuid
  flow            String    @db.VarChar(255)
  subId           String    @db.VarChar(255)
  tgId            String    @db.VarChar(255)
  limitIp         Int
  lastConnectedAt DateTime?

  server  Server        @relation(fields: [serverId], references: [id])
  Package UserPackage[]

  @@index([serverId], name: "ClientStatServerIdIndex")
  @@index([expiryTime], name: "ClientStatExpiryTimeIndex")
  @@index([total], name: "ClientStatTotalIndex")
  @@index([down], name: "ClientStatDownIndex")
  @@index([up], name: "ClientStatUpIndex")
}

enum PaymentState {
  PENDING
  APPLIED
  REJECTED
}

enum PaymentType {
  PACKAGE_PURCHASE
  WALLET_RECHARGE
  IRAN_SERVER_COST
  EXTERNAL_SERVER_COST
}

model Payment {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  amount       Float
  type         PaymentType
  status       PaymentState @default(PENDING)
  receiptImage String?      @db.VarChar(255)
  payerId      String       @db.Uuid
  profitAmount Float        @default(0)
  parentProfit Float        @default(0)
  description  String?

  payer       User          @relation(fields: [payerId], references: [id])
  userPackage UserPackage[]
}

// model Transation {
//   id        String   @id
//   amount    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   payerId   String

//   payer User @relation(fields: [payerId], references: [id])
// }

// model Transfer {
//   id         String   @id 
//   amount     Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   senderId   String
//   receiverId String

//   sender   User @relation("TransferSenderRelation", fields: [senderId], references: [id])
//   receiver User @relation("TransferReceiverRelation", fields: [receiverId], references: [id])
// }

model Promotion {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  code          String    @unique @db.VarChar(255)
  parentUserId  String    @db.Uuid
  giftPackageId String?   @db.Uuid

  parentUser  User     @relation(fields: [parentUserId], references: [id])
  giftPackage Package? @relation(fields: [giftPackageId], references: [id])

  @@index([code], name: "PromotionCodeIndex")
}



model UserGift {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  userId        String    @db.Uuid
  giftPackageId String?   @db.Uuid
  isGiftUsed    Boolean   @default(false)
  promotionId   String?   @db.Uuid

  user        User     @relation(fields: [userId], references: [id])
  giftPackage Package? @relation(fields: [giftPackageId], references: [id])

  @@index([userId], name: "UserGiftUserIdIndex")
  @@index([isGiftUsed], name: "UserGiftIsGiftUsedIndex")
}
