# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Arvan {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!
  nsKeys: [String!]!
  password: String!
  token: String
  tokenExpiredAt: DateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type BankCard {
  name: String!
  number: String!
}

"""A custom scalar type for big numbers"""
scalar BigNumber

input BuyPackageInput {
  name: String!
  packageId: String!
  receipt: String
}

input BuyRechargePackageInput {
  receipt: String!
  rechargePackageId: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Child {
  activePackages: Int!
  appliedDiscountPercent: Float
  balance: Float!
  bankCard: [BankCard!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  firstname: String!
  id: ID!
  initialDiscountPercent: Float
  isDisabled: Boolean
  isParentDisabled: Boolean
  lastConnectedAt: DateTime
  lastname: String!
  maxRechargeDiscountPercent: Float
  parent: Parent
  parentId: String
  phone: String!
  profitBalance: Float!
  profitPercent: Float!
  referId: String
  role: Role!
  telegram: TelegramUser
  totalProfit: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userGift: [UserGift!]
}

type ClientStat {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  down: BigNumber!
  email: String!
  enable: Boolean!
  expiryTime: BigNumber!
  id: ID!
  total: BigNumber!
  up: BigNumber!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input CreateArvanAccountInput {
  email: String!
  password: String!
}

input CreateDomainInput {
  arvanAccount: String!
  domain: String!
  expiredAt: String
  serverDomain: String!
}

input CreateServerInput {
  domain: String!
  inboundId: Int!
  ip: String!
  type: ServerCountry!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dns {
  cloud: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: String!
  name: String!
  ttl: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  upstream_https: UpstreamHttps!
  value: [DnsValue!]!
}

type DnsValue {
  country: String!
  ip: String!
  port: String
  weight: Int!
}

type Domain {
  arvanSslState: DomainState!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  domain: String!
  expiredAt: DateTime!
  id: ID!
  letsEncryptSsl: DomainState!
  nsState: DomainState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Domain state"""
enum DomainState {
  APPLIED
  PENDING
}

input DomainsFiltersInput {
  arvanSslState: DomainState
  domain: String
  letsEncryptSsl: DomainState
  nsState: DomainState
}

input EnterCostInput {
  amount: Int!
  description: String
  type: PaymentType!
}

input GetClientStatsFiltersInput {
  id: String!
}

input IssueCertInput {
  domain: String!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Login {
  isPromoCodeValid: Boolean
  loggedIn: LoginData
}

type LoginData {
  tokens: Token!
  user: User!
}

input LoginInput {
  password: String!
  phone: String!
}

type Mutation {
  addArvanAccount(data: CreateArvanAccountInput!): Arvan!
  addDomain(data: CreateDomainInput!): Domain!
  addServer(data: CreateServerInput!): Server!
  buyPackage(data: BuyPackageInput!): String!
  buyRechargePackage(input: BuyRechargePackageInput!): User!
  changePassword(data: ChangePasswordInput!): User!
  enterCost(input: EnterCostInput!): User!
  issueCert(data: IssueCertInput!): Domain!
  login(data: LoginInput!): Login!
  logout: Boolean!
  refreshToken(token: JWT!): Token!
  renewPackage(input: RenewPackageInput!): String!
  signup(data: SignupInput!): Auth!
  updateArvanSslStates: Boolean!
  updateChild(input: UpdateChildInput!): User!
  updateIp(data: UpdateDnsIpInput!): [Dns!]!
  updateLetsEncryptSslStates: Boolean!
  updateNsStates: Boolean!
  updatePort(data: UpdateDnsPortInput!): Dns!
  updateUser(input: UpdateUserInput!): User!
  uploadImage(input: UploadInput!): String!
}

type Package {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  expirationDays: Int!
  id: ID!
  price: Int!
  traffic: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userCount: Int!
}

type Parent {
  bankCard: [BankCard!]
  id: String!
  telegram: ParentTelegram
}

type ParentTelegram {
  username: String
}

"""Payment Type"""
enum PaymentType {
  EXTERNAL_SERVER_COST
  IRAN_SERVER_COST
  PACKAGE_PURCHASE
  WALLET_RECHARGE
}

type Query {
  children: [Child!]!
  clientStats(filters: GetClientStatsFiltersInput!): [ClientStat!]!
  domains(filters: DomainsFiltersInput): [Domain!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  packages: [Package!]!
  rechargePackages: [RechargePackage!]!
  userPackages: [UserPackage!]!
}

type RechargePackage {
  amount: Float!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  discountPercent: Float!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input RenewPackageInput {
  packageId: String!
  receipt: String
  userPackageId: String!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

type Server {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  domain: String!
  id: ID!
  inboundId: Int!
  ip: String!
  token: String!
  type: ServerCountry!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""ServerCountry"""
enum ServerCountry {
  DE
  IR
  NL
  TR
}

input SignupInput {
  firstname: String!
  lastname: String!
  password: String!
  phone: String!
  promoCode: String
}

type TelegramUser {
  bigAvatar: String
  firstname: String
  id: BigNumber!
  lastname: String
  phone: String
  smallAvatar: String
  username: String
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateChildInput {
  childId: String!
  description: String
  firstname: String
  isDisabled: Boolean
  lastname: String
  password: String
  phone: String
  role: Role
}

input UpdateDnsIpInput {
  domain: String!
  ip: String!
}

input UpdateDnsPortInput {
  domain: String!
  port: String!
}

input UpdateUserInput {
  cardBandName: String
  cardBandNumber: String
  firstname: String
  lastname: String
  password: String
  phone: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadInput {
  image: Upload!
}

"""Upstream Https"""
enum UpstreamHttps {
  auto
  default
  http
  https
}

type User {
  appliedDiscountPercent: Float
  balance: Float!
  bankCard: [BankCard!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  firstname: String!
  id: ID!
  initialDiscountPercent: Float
  isDisabled: Boolean
  isParentDisabled: Boolean
  lastname: String!
  maxRechargeDiscountPercent: Float
  parent: Parent
  parentId: String
  phone: String!
  profitBalance: Float!
  profitPercent: Float!
  referId: String
  role: Role!
  telegram: TelegramUser
  totalProfit: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  userGift: [UserGift!]
}

type UserGift {
  giftPackage: Package
  isGiftUsed: Boolean!
}

type UserPackage {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  expiryTime: BigNumber!
  id: ID!
  lastConnectedAt: DateTime
  link: String!
  name: String!
  remainingTraffic: BigNumber!
  totalTraffic: BigNumber!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}